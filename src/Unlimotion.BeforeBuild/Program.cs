// See https://aka.ms/new-console-template for more information
using System.Text;
using BeforeBuild.Helpers;
using Unlimotion.BeforeBuild.Helpers;

const string defaultAppName = "Unlimotion";
const string partialAppNameServiceFileName = "AppNameDefinitionService.cs";
const string solutionDirectoryName = "src";
const string defaultErrorMessage = "Failed to initialize application name, because";
const string generatedPartialAppServiceName = $"{partialAppNameServiceFileName}.pre-build.cs";
string? appFullName;

SetAppFullName();

var solutionPath = GetSolutionPath(Environment.CurrentDirectory);

if (solutionPath == null)
{
    Console.WriteLine($"{defaultErrorMessage} could not find solution directory");
    return;
}

var appNameServicePath = FileHelper.FindDirectoryWithFile(solutionPath, partialAppNameServiceFileName);

if (appNameServicePath == null)
{
    Console.WriteLine($"{defaultErrorMessage} file ${partialAppNameServiceFileName} could not be found");
    return;
}

FileHelper.CreateFileInDirectory(appNameServicePath, generatedPartialAppServiceName, GenerateCodeForPartialService());

void SetAppFullName()
{
string? additionalAppName;
#if GITHUB_ACTIONS
    additionalAppName = Ennvironment.GetVariable("GITHUB_REF_NAME");
#else
    additionalAppName = GitHelper.GetCurrentBranchNameWithShortHash();
#endif
    appFullName = $"{defaultAppName} {additionalAppName}";
}

string? GetSolutionPath(string path)
{
    var index = path.IndexOf(solutionDirectoryName, StringComparison.Ordinal);
    return index != -1 
        ? path[..(index + solutionDirectoryName.Length)] 
        : null;
}

string GenerateCodeForPartialService()
{
    var sb = new StringBuilder();
    sb.AppendLine(@"// <auto-generated. pre-build event.>");
    sb.AppendLine("using Unlimotion.ViewModel;");
    sb.AppendLine("namespace Unlimotion.Services");
    sb.AppendLine("{");
    sb.AppendLine("     public partial class AppNameDefinitionService");
    sb.AppendLine("     {");
    sb.AppendLine($"            private string AppName = \"{appFullName}\";");
    sb.AppendLine("     }");
    sb.AppendLine("}");

    return sb.ToString();
}
